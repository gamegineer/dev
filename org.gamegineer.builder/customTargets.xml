<?xml version="1.0" encoding="UTF-8"?>
<project name="Build specific targets and properties" default="noDefault">

    <property environment="env" />

    <!-- ===================================================================== -->
    <!-- Run a given ${target} on all elements being built                     -->
    <!-- Add on <ant> task for each top level element being built.             -->
    <!-- ===================================================================== -->
    <property name="allElementsFile" value="${builder}/allElements.xml" />
    <import file="${allElementsFile}" />
    <target name="allElements">
        <antcall target="allElementsDelegator" />
    </target>

    <!-- ===================================================================== -->
    <!-- ===================================================================== -->
    <target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
        <get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
        <unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
    </target>

    <target name="checkLocalBase">
        <available file="${base}" property="skipBase" />
    </target>

    <!-- ===================================================================== -->
    <!-- Check out map files from correct repository                           -->
    <!-- Replace values for mapsCheckoutTag as desired.                        -->
    <!-- ===================================================================== -->
    <target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
        <property name="mapsCheckoutTag" value="HEAD" />
        <cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
    </target>

    <target name="checkLocalMaps">
        <available property="skipMaps" file="${buildDirectory}/maps" />
    </target>

    <target name="tagMapFiles" if="tagMaps">
        <cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
    </target>

    <!-- ===================================================================== -->

    <target name="clean" unless="noclean">
        <antcall target="allElements">
            <param name="target" value="cleanElement" />
        </antcall>
    </target>

    <target name="gatherLogs">
        <mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
        <antcall target="allElements">
            <param name="target" value="gatherLogs" />
        </antcall>
        <unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
            <fileset dir="${buildDirectory}/features">
                <include name="**/*.log.zip" />
            </fileset>
        </unzip>
    </target>

    <!-- Generate Javadocs for the entire workspace. -->
    <target name="javadoc">
        <javadoc
                access="private"
                author="true"
                bottom="Copyright 2008-2009 Gamegineer.org.  All rights reserved."
                destdir="${buildDirectory}/${buildLabel}/docs/api"
                doctitle="Gamegineer API"
                failonerror="true"
                nodeprecated="false"
                nodeprecatedlist="false"
                noindex="false"
                nonavbar="false"
                notree="false"
                source="1.6"
                splitindex="true"
                use="true"
                version="true"
                windowtitle="Gamegineer API">
            <classpath>
                <fileset dir="${baseLocation}">
                    <include name="plugins/**/*.jar" />
                </fileset>
                <fileset dir="${buildDirectory}">
                    <include name="plugins/**/lib/*.jar" />
                </fileset>
            </classpath>
            <sourcepath>
                <dirset dir="${buildDirectory}">
                    <include name="plugins/**/src" />
                </dirset>
            </sourcepath>
        </javadoc>
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do before setup.                                             -->
    <!-- ===================================================================== -->
    <target name="preSetup">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do after setup but before starting the build proper.         -->
    <!-- ===================================================================== -->
    <target name="postSetup">
        <antcall target="getBaseComponents" />
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do before fetching the build elements.                       -->
    <!-- ===================================================================== -->
    <target name="preFetch">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do after fetching the build elements.                        -->
    <!-- ===================================================================== -->
    <target name="postFetch">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do before generating the build scripts.                      -->
    <!-- ===================================================================== -->
    <target name="preGenerate">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do after generating the build scripts.                       -->
    <!-- ===================================================================== -->
    <target name="postGenerate">
        <antcall target="clean" />
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do before running the build.xmls for the elements being built. -->
    <!-- ===================================================================== -->
    <target name="preProcess">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do after running the build.xmls for the elements being built. -->
    <!-- ===================================================================== -->
    <target name="postProcess">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do before running assemble.                                  -->
    <!-- ===================================================================== -->
    <target name="preAssemble">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do after running assemble.                                   -->
    <!-- ===================================================================== -->
    <target name="postAssemble">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do before running package.                                   -->
    <!-- ===================================================================== -->
    <target name="prePackage">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do after running package.                                    -->
    <!-- ===================================================================== -->
    <target name="postPackage">
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do after the build is done.                                  -->
    <!-- ===================================================================== -->
    <target name="postBuild">
        <antcall target="gatherLogs" />
        <antcall target="javadoc" />
        <antcall target="test" />
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do to test the build results.                                -->
    <!-- ===================================================================== -->
    <target name="test">
        <!-- Create test workspace. -->
        <mkdir dir="${buildDirectory}/${buildLabel}/test-workspace" />

        <!-- Unzip Eclipse SDK into workspace. -->
        <unzip src="${env.ECLIPSE_HOME}/eclipse-SDK-${eclipseBuildId}-${baseos}.zip" dest="${buildDirectory}/${buildLabel}/test-workspace" overwrite="true" />

        <!-- Unzip Eclipse Test Framework into workspace. -->
        <unzip src="${env.ECLIPSE_TEST_FRAMEWORK_HOME}/eclipse-test-framework-${eclipseBuildId}.zip" dest="${buildDirectory}/${buildLabel}/test-workspace" overwrite="true" />

        <!-- Unzip all Gamegineer features into workspace. -->
        <unzip dest="${buildDirectory}/${buildLabel}/test-workspace" overwrite="true">
            <fileset dir="${buildDirectory}/${buildLabel}">
                <include name="*.zip" />
            </fileset>
        </unzip>

        <!-- Run all tests in all Gamegineer test plugins. -->
        <subant>
            <fileset dir="${buildDirectory}/${buildLabel}/test-workspace/${archivePrefix}/plugins" includes="org.gamegineer.*.tests_*/test.xml" />
        </subant>

        <!-- Fail the build if any unit test failed. -->
        <concat destfile="${buildDirectory}/${buildLabel}/test-workspace/${archivePrefix}/results/allTestResults.txt">
            <fileset dir="${buildDirectory}/${buildLabel}/test-workspace/${archivePrefix}/results" includes="*.xml" />
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="(errors|failures)=&quot;[1-9][0-9]*&quot;" />
                </linecontainsregexp>
            </filterchain>
        </concat>
        <fail message="One or more unit tests failed.">
            <condition>
                <length file="${buildDirectory}/${buildLabel}/test-workspace/${archivePrefix}/results/allTestResults.txt" when="greater" length="0" /> 
            </condition>
        </fail>
    </target>

    <!-- ===================================================================== -->
    <!-- Steps to do to publish the build results.                             -->
    <!-- ===================================================================== -->
    <target name="publish">
    </target>

    <!-- ===================================================================== -->
    <!-- Default target.                                                       -->
    <!-- ===================================================================== -->
    <target name="noDefault">
        <echo message="You must specify a target when invoking this file" />
    </target>

</project>
